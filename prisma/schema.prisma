generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  LEGAL
  HR
  DEV
  ADMIN
  USER
}

model User {
  id            String    @id
  name          String
  role          Role      
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  twoFactorEnabled Boolean?
  twofactors       TwoFactor[]
  Document         Document[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Document {
  id          String       @id @default(uuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  storagePath String
  accessLinks AccessLink[]
  clauses     Clause[]
  createdAt   DateTime     @default(now())
}

model Clause {
  id             String   @id @default(uuid())
  documentId     String
  text           String
  clauseType     String?
  suggestedEdits String?
  riskScore      Int?
  document       Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
}

model AccessLink {
  id         String   @id @default(uuid())
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  token      String   @unique
  password   String? // hashed
  expiresAt  DateTime
  otp        String?
  used Boolean @default(false)
  createdAt DateTime @default(now())
}



